using AlugueLinkWEB.Models;
using Core.DTO;

namespace AlugueLinkWEB.Mappers
{
    public static class ImovelMapper
    {
        public static ImovelViewModel ToViewModel(ImovelDTO dto)
        {
            return new ImovelViewModel
            {
                Id = dto.Id,
                Cep = dto.Cep,
                Logradouro = dto.Logradouro,
                Numero = dto.Numero,
                Complemento = dto.Complemento,
                Bairro = dto.Bairro,
                Cidade = dto.Cidade,
                Estado = dto.Estado,
                Tipo = MapTipoFromDatabase(dto.Tipo),
                Quartos = dto.Quartos,
                Banheiros = dto.Banheiros,
                Area = dto.Area,
                VagasGaragem = dto.VagasGaragem,
                Valor = dto.Valor,
                Descricao = dto.Descricao,
                LocadorId = dto.IdLocador
            };
        }

        public static ImovelDTO ToDTO(ImovelViewModel viewModel)
        {
            return new ImovelDTO
            {
                Id = viewModel.Id,
                Cep = viewModel.Cep,
                Logradouro = viewModel.Logradouro,
                Numero = viewModel.Numero,
                Complemento = viewModel.Complemento,
                Bairro = viewModel.Bairro,
                Cidade = viewModel.Cidade,
                Estado = viewModel.Estado,
                Tipo = MapTipoToDatabase(viewModel.Tipo),
                Quartos = viewModel.Quartos,
                Banheiros = viewModel.Banheiros,
                Area = viewModel.Area,
                VagasGaragem = viewModel.VagasGaragem,
                Valor = viewModel.Valor,
                Descricao = viewModel.Descricao,
                IdLocador = viewModel.LocadorId
            };
        }

        public static IEnumerable<ImovelViewModel> ToViewModelList(IEnumerable<ImovelDTO> dtos)
        {
            return dtos.Select(ToViewModel);
        }

        private static string? MapTipoFromDatabase(string? tipoDb)
        {
            return tipoDb switch
            {
                // Current database enum values
                "C" => "Casa",
                "A" => "Apartamento",
                "PC" => "Comercial",
                // Support for full word values if they exist
                "casa" => "Casa",
                "apartamento" => "Apartamento", 
                "comercial" => "Comercial",
                _ => tipoDb
            };
        }

        private static string? MapTipoToDatabase(string? tipoView)
        {
            return tipoView?.ToLower() switch
            {
                "casa" => "C",
                "apartamento" => "A",
                "comercial" => "PC",
                _ => tipoView
            };
        }
    }
}