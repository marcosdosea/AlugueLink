using AlugueLinkWEB.Models;
using System.ComponentModel.DataAnnotations;
using Xunit;

namespace AlugueLinkWebTests
{
    public class ImovelViewModelValidationTests
    {
        private IList<ValidationResult> ValidateModel(object model)
        {
            var validationResults = new List<ValidationResult>();
            var validationContext = new ValidationContext(model);
            Validator.TryValidateObject(model, validationContext, validationResults, true);
            return validationResults;
        }

        [Fact]
        public void ImovelViewModel_ComTodosCamposObrigatorios_DeveSerValido()
        {
            // Arrange
            var viewModel = new ImovelViewModel
            {
                Cep = "01234567",
                Logradouro = "Av. Paulista",
                Numero = "1000",
                Bairro = "Bela Vista",
                Cidade = "São Paulo",
                Estado = "SP",
                Tipo = "apartamento",
                Quartos = 2,
                Banheiros = 1,
                Area = 65.50m,
                Valor = 1500.00m,
                LocadorId = 1
            };

            // Act
            var validationResults = ValidateModel(viewModel);

            // Assert
            Assert.Empty(validationResults);
        }

        [Fact]
        public void ImovelViewModel_ComCamposObrigatoriosVazios_DeveRetornarErros()
        {
            // Arrange
            var viewModel = new ImovelViewModel(); // Todos os campos nulos/vazios

            // Act
            var validationResults = ValidateModel(viewModel);

            // Assert
            Assert.NotEmpty(validationResults);
            
            var erros = validationResults.Select(r => r.ErrorMessage).ToList();
            Assert.Contains("CEP é obrigatório", erros);
            Assert.Contains("Logradouro é obrigatório", erros);
            Assert.Contains("Número é obrigatório", erros);
            Assert.Contains("Bairro é obrigatório", erros);
            Assert.Contains("Cidade é obrigatória", erros);
            Assert.Contains("Estado é obrigatório", erros);
            Assert.Contains("Tipo de imóvel é obrigatório", erros);
            Assert.Contains("Número de quartos é obrigatório", erros);
            Assert.Contains("Número de banheiros é obrigatório", erros);
            Assert.Contains("Área é obrigatória", erros);
            Assert.Contains("Valor do aluguel é obrigatório", erros);
            Assert.Contains("Locador é obrigatório", erros);
        }

        [Theory]
        [InlineData("1234567", "CEP deve ter 8 caracteres")] // Muito curto
        [InlineData("123456789", "CEP deve ter 8 caracteres")] // Muito longo
        public void ImovelViewModel_ComCepInvalido_DeveRetornarErro(string cep, string mensagemEsperada)
        {
            // Arrange
            var viewModel = new ImovelViewModel
            {
                Cep = cep,
                Logradouro = "Rua Teste",
                Numero = "123",
                Bairro = "Centro",
                Cidade = "São Paulo",
                Estado = "SP",
                Tipo = "casa",
                Quartos = 2,
                Banheiros = 1,
                Area = 80m,
                Valor = 1500m,
                LocadorId = 1
            };

            // Act
            var validationResults = ValidateModel(viewModel);

            // Assert
            Assert.Contains(validationResults, r => r.ErrorMessage == mensagemEsperada);
        }

        [Theory]
        [InlineData("A")] // Muito curto (1 caractere)
        [InlineData("A")] // Mínimo válido (1 caractere) 
        [InlineData("SP")] // Padrão (2 caracteres)
        [InlineData("ABC")] // Muito longo (3 caracteres)
        public void ImovelViewModel_ComEstadoDiferentesTamanhos_DeveValidarCorretamente(string estado)
        {
            // Arrange
            var viewModel = new ImovelViewModel
            {
                Cep = "12345678",
                Logradouro = "Rua Teste",
                Numero = "123",
                Bairro = "Centro",
                Cidade = "São Paulo",
                Estado = estado,
                Tipo = "casa",
                Quartos = 2,
                Banheiros = 1,
                Area = 80m,
                Valor = 1500m,
                LocadorId = 1
            };

            // Act
            var validationResults = ValidateModel(viewModel);

            // Assert
            if (estado.Length != 2)
            {
                Assert.Contains(validationResults, r => r.ErrorMessage == "Estado deve ter 2 caracteres");
            }
            else
            {
                Assert.DoesNotContain(validationResults, r => r.ErrorMessage?.Contains("Estado") == true);
            }
        }

        [Theory]
        [InlineData(-1, "Número de quartos deve estar entre 0 e 50")]
        [InlineData(0, null)] // Válido
        [InlineData(25, null)] // Válido
        [InlineData(50, null)] // Limite máximo válido
        [InlineData(51, "Número de quartos deve estar entre 0 e 50")]
        public void ImovelViewModel_ComQuartosForaDoRange_DeveValidarCorretamente(int quartos, string? mensagemEsperada)
        {
            // Arrange
            var viewModel = new ImovelViewModel
            {
                Cep = "12345678",
                Logradouro = "Rua Teste",
                Numero = "123",
                Bairro = "Centro",
                Cidade = "São Paulo",
                Estado = "SP",
                Tipo = "casa",
                Quartos = quartos,
                Banheiros = 1,
                Area = 80m,
                Valor = 1500m,
                LocadorId = 1
            };

            // Act
            var validationResults = ValidateModel(viewModel);

            // Assert
            if (mensagemEsperada != null)
            {
                Assert.Contains(validationResults, r => r.ErrorMessage == mensagemEsperada);
            }
            else
            {
                Assert.DoesNotContain(validationResults, r => r.ErrorMessage?.Contains("quartos") == true);
            }
        }

        [Theory]
        [InlineData(-1, "Número de banheiros deve estar entre 0 e 50")]
        [InlineData(0, null)] // Válido
        [InlineData(25, null)] // Válido
        [InlineData(50, null)] // Limite máximo válido
        [InlineData(51, "Número de banheiros deve estar entre 0 e 50")]
        public void ImovelViewModel_ComBanheirosForaDoRange_DeveValidarCorretamente(int banheiros, string? mensagemEsperada)
        {
            // Arrange
            var viewModel = new ImovelViewModel
            {
                Cep = "12345678",
                Logradouro = "Rua Teste",
                Numero = "123",
                Bairro = "Centro",
                Cidade = "São Paulo",
                Estado = "SP",
                Tipo = "casa",
                Quartos = 2,
                Banheiros = banheiros,
                Area = 80m,
                Valor = 1500m,
                LocadorId = 1
            };

            // Act
            var validationResults = ValidateModel(viewModel);

            // Assert
            if (mensagemEsperada != null)
            {
                Assert.Contains(validationResults, r => r.ErrorMessage == mensagemEsperada);
            }
            else
            {
                Assert.DoesNotContain(validationResults, r => r.ErrorMessage?.Contains("banheiros") == true);
            }
        }

        [Theory]
        [InlineData(0, "Área deve ser um valor entre 0,01 e 99.999,99 m²")]
        [InlineData(0.005, "Área deve ser um valor entre 0,01 e 99.999,99 m²")]
        [InlineData(0.01, null)] // Mínimo válido
        [InlineData(50.75, null)] // Válido
        [InlineData(99999.99, null)] // Máximo válido
        [InlineData(100000, "Área deve ser um valor entre 0,01 e 99.999,99 m²")]
        public void ImovelViewModel_ComAreaForaDoRange_DeveValidarCorretamente(decimal area, string? mensagemEsperada)
        {
            // Arrange
            var viewModel = new ImovelViewModel
            {
                Cep = "12345678",
                Logradouro = "Rua Teste",
                Numero = "123",
                Bairro = "Centro",
                Cidade = "São Paulo",
                Estado = "SP",
                Tipo = "casa",
                Quartos = 2,
                Banheiros = 1,
                Area = area,
                Valor = 1500m,
                LocadorId = 1
            };

            // Act
            var validationResults = ValidateModel(viewModel);

            // Assert
            if (mensagemEsperada != null)
            {
                Assert.Contains(validationResults, r => r.ErrorMessage == mensagemEsperada);
            }
            else
            {
                Assert.DoesNotContain(validationResults, r => r.ErrorMessage?.Contains("Área") == true);
            }
        }

        [Theory]
        [InlineData(0, "Valor deve estar entre R$ 0,01 e R$ 999.999,99")]
        [InlineData(0.005, "Valor deve estar entre R$ 0,01 e R$ 999.999,99")]
        [InlineData(0.01, null)] // Mínimo válido
        [InlineData(1500.50, null)] // Válido
        [InlineData(999999.99, null)] // Máximo válido
        [InlineData(1000000, "Valor deve estar entre R$ 0,01 e R$ 999.999,99")]
        public void ImovelViewModel_ComValorForaDoRange_DeveValidarCorretamente(decimal valor, string? mensagemEsperada)
        {
            // Arrange
            var viewModel = new ImovelViewModel
            {
                Cep = "12345678",
                Logradouro = "Rua Teste",
                Numero = "123",
                Bairro = "Centro",
                Cidade = "São Paulo",
                Estado = "SP",
                Tipo = "casa",
                Quartos = 2,
                Banheiros = 1,
                Area = 80m,
                Valor = valor,
                LocadorId = 1
            };

            // Act
            var validationResults = ValidateModel(viewModel);

            // Assert
            if (mensagemEsperada != null)
            {
                Assert.Contains(validationResults, r => r.ErrorMessage == mensagemEsperada);
            }
            else
            {
                Assert.DoesNotContain(validationResults, r => r.ErrorMessage?.Contains("Valor") == true);
            }
        }

        [Theory]
        [InlineData(-1, "Número de vagas deve estar entre 0 e 50")]
        [InlineData(0, null)] // Válido - campo opcional
        [InlineData(null, null)] // Válido - campo opcional
        [InlineData(25, null)] // Válido
        [InlineData(50, null)] // Máximo válido
        [InlineData(51, "Número de vagas deve estar entre 0 e 50")]
        public void ImovelViewModel_ComVagasGaragemForaDoRange_DeveValidarCorretamente(int? vagas, string? mensagemEsperada)
        {
            // Arrange
            var viewModel = new ImovelViewModel
            {
                Cep = "12345678",
                Logradouro = "Rua Teste",
                Numero = "123",
                Bairro = "Centro",
                Cidade = "São Paulo",
                Estado = "SP",
                Tipo = "casa",
                Quartos = 2,
                Banheiros = 1,
                Area = 80m,
                Valor = 1500m,
                VagasGaragem = vagas,
                LocadorId = 1
            };

            // Act
            var validationResults = ValidateModel(viewModel);

            // Assert
            if (mensagemEsperada != null)
            {
                Assert.Contains(validationResults, r => r.ErrorMessage == mensagemEsperada);
            }
            else
            {
                Assert.DoesNotContain(validationResults, r => r.ErrorMessage?.Contains("vagas") == true);
            }
        }

        [Theory]
        [InlineData(null)] // Campo opcional - válido
        [InlineData("")] // Campo opcional - válido
        [InlineData("Apartamento mobiliado")] // Válido
        public void ImovelViewModel_ComDescricaoOpcional_DeveSerValido(string? descricao)
        {
            // Arrange
            var viewModel = new ImovelViewModel
            {
                Cep = "12345678",
                Logradouro = "Rua Teste",
                Numero = "123",
                Bairro = "Centro",
                Cidade = "São Paulo",
                Estado = "SP",
                Tipo = "casa",
                Quartos = 2,
                Banheiros = 1,
                Area = 80m,
                Valor = 1500m,
                Descricao = descricao,
                LocadorId = 1
            };

            // Act
            var validationResults = ValidateModel(viewModel);

            // Assert
            Assert.DoesNotContain(validationResults, r => r.ErrorMessage?.Contains("Descrição") == true);
        }

        [Fact]
        public void ImovelViewModel_ComStringsMuitoLongas_DeveRetornarErros()
        {
            // Arrange
            var viewModel = new ImovelViewModel
            {
                Cep = "123456789", // 9 caracteres (máximo 8)
                Logradouro = new string('A', 101), // 101 caracteres (máximo 100)
                Numero = "123456", // 6 caracteres (máximo 5)
                Complemento = new string('B', 51), // 51 caracteres (máximo 50)
                Bairro = new string('C', 51), // 51 caracteres (máximo 50)
                Cidade = new string('D', 46), // 46 caracteres (máximo 45)
                Estado = "ABC", // 3 caracteres (deve ter 2)
                Tipo = "casa",
                Quartos = 2,
                Banheiros = 1,
                Area = 80m,
                Valor = 1500m,
                LocadorId = 1
            };

            // Act
            var validationResults = ValidateModel(viewModel);

            // Assert
            var erros = validationResults.Select(r => r.ErrorMessage).ToList();
            Assert.Contains("CEP deve ter 8 caracteres", erros);
            Assert.Contains("Logradouro não pode ter mais de 100 caracteres", erros);
            Assert.Contains("Número não pode ter mais de 5 caracteres", erros);
            Assert.Contains("Complemento não pode ter mais de 50 caracteres", erros);
            Assert.Contains("Bairro não pode ter mais de 50 caracteres", erros);
            Assert.Contains("Cidade não pode ter mais de 45 caracteres", erros);
            Assert.Contains("Estado deve ter 2 caracteres", erros);
        }
    }
}