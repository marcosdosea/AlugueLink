using AlugueLinkWEB.Mappers;
using AlugueLinkWEB.Models;
using Core.DTO;
using Xunit;

namespace AlugueLinkWebTests
{
    public class ImovelMapperTests
    {
        [Fact]
        public void ToDTO_DeveConverterViewModelParaDTO()
        {
            // Arrange
            var viewModel = new ImovelViewModel
            {
                Id = 1,
                Cep = "01234567",
                Logradouro = "Av. Paulista",
                Numero = "1000",
                Complemento = "Conjunto 45",
                Bairro = "Bela Vista",
                Cidade = "São Paulo",
                Estado = "SP",
                Tipo = "apartamento", // Será convertido para "A"
                Quartos = 3,
                Banheiros = 2,
                Area = 120.50m,
                VagasGaragem = 2,
                Valor = 3500.75m,
                Descricao = "Apartamento amplo e bem localizado",
                LocadorId = 5
            };

            // Act
            var dto = ImovelMapper.ToDTO(viewModel);

            // Assert
            Assert.Equal(1, dto.Id);
            Assert.Equal("01234567", dto.Cep);
            Assert.Equal("Av. Paulista", dto.Logradouro);
            Assert.Equal("1000", dto.Numero);
            Assert.Equal("Conjunto 45", dto.Complemento);
            Assert.Equal("Bela Vista", dto.Bairro);
            Assert.Equal("São Paulo", dto.Cidade);
            Assert.Equal("SP", dto.Estado);
            Assert.Equal("A", dto.Tipo); // Convertido para código do banco
            Assert.Equal(3, dto.Quartos);
            Assert.Equal(2, dto.Banheiros);
            Assert.Equal(120.50m, dto.Area);
            Assert.Equal(2, dto.VagasGaragem);
            Assert.Equal(3500.75m, dto.Valor);
            Assert.Equal("Apartamento amplo e bem localizado", dto.Descricao);
            Assert.Equal(5, dto.IdLocador);
        }

        [Fact]
        public void ToDTO_ComCamposNulos_DeveManterNulos()
        {
            // Arrange
            var viewModel = new ImovelViewModel
            {
                Id = 2,
                // Campos obrigatórios preenchidos
                Cep = "12345678",
                Logradouro = "Rua Teste",
                Numero = "123",
                Bairro = "Centro",
                Cidade = "Rio de Janeiro",
                Estado = "RJ",
                Tipo = "casa", // Será convertido para "C"
                Quartos = 2,
                Banheiros = 1,
                Area = 85.00m,
                Valor = 2200.00m,
                LocadorId = 3,
                // Campos opcionais nulos
                Complemento = null,
                VagasGaragem = null,
                Descricao = null
            };

            // Act
            var dto = ImovelMapper.ToDTO(viewModel);

            // Assert
            Assert.Equal(2, dto.Id);
            Assert.Equal("Rio de Janeiro", dto.Cidade);
            Assert.Equal(2200.00m, dto.Valor);
            Assert.Equal(3, dto.IdLocador);
            Assert.Equal("C", dto.Tipo); // Convertido
            Assert.Null(dto.Complemento);
            Assert.Null(dto.VagasGaragem);
            Assert.Null(dto.Descricao);
        }

        [Fact]
        public void ToViewModel_DeveConverterDTOParaViewModel()
        {
            // Arrange
            var dto = new ImovelDTO
            {
                Id = 10,
                Cep = "87654321",
                Logradouro = "Rua das Flores",
                Numero = "456",
                Complemento = "Apto 101",
                Bairro = "Jardins",
                Cidade = "Belo Horizonte",
                Estado = "MG",
                Tipo = "PC", // Código do banco para comercial
                Quartos = 0,
                Banheiros = 3,
                Area = 200.25m,
                VagasGaragem = 5,
                Valor = 8500.99m,
                Descricao = "Sala comercial premium",
                IdLocador = 7
            };

            // Act
            var viewModel = ImovelMapper.ToViewModel(dto);

            // Assert
            Assert.Equal(10, viewModel.Id);
            Assert.Equal("87654321", viewModel.Cep);
            Assert.Equal("Rua das Flores", viewModel.Logradouro);
            Assert.Equal("456", viewModel.Numero);
            Assert.Equal("Apto 101", viewModel.Complemento);
            Assert.Equal("Jardins", viewModel.Bairro);
            Assert.Equal("Belo Horizonte", viewModel.Cidade);
            Assert.Equal("MG", viewModel.Estado);
            Assert.Equal("Comercial", viewModel.Tipo); // Convertido para nome amigável
            Assert.Equal(0, viewModel.Quartos);
            Assert.Equal(3, viewModel.Banheiros);
            Assert.Equal(200.25m, viewModel.Area);
            Assert.Equal(5, viewModel.VagasGaragem);
            Assert.Equal(8500.99m, viewModel.Valor);
            Assert.Equal("Sala comercial premium", viewModel.Descricao);
            Assert.Equal(7, viewModel.LocadorId);
        }

        [Fact]
        public void ToViewModel_ComCamposNulos_DeveManterNulos()
        {
            // Arrange
            var dto = new ImovelDTO
            {
                Id = 15,
                Cep = "11111111",
                Logradouro = "Av. Central",
                Numero = "999",
                Bairro = "Centro",
                Cidade = "Brasília",
                Estado = "DF",
                Tipo = "C", // Casa
                Quartos = 4,
                Banheiros = 3,
                Area = 180.00m,
                Valor = 4200.00m,
                IdLocador = 9,
                // Campos opcionais nulos
                Complemento = null,
                VagasGaragem = null,
                Descricao = null
            };

            // Act
            var viewModel = ImovelMapper.ToViewModel(dto);

            // Assert
            Assert.Equal(15, viewModel.Id);
            Assert.Equal("Brasília", viewModel.Cidade);
            Assert.Equal(4200.00m, viewModel.Valor);
            Assert.Equal(9, viewModel.LocadorId);
            Assert.Equal("Casa", viewModel.Tipo); // Convertido
            Assert.Null(viewModel.Complemento);
            Assert.Null(viewModel.VagasGaragem);
            Assert.Null(viewModel.Descricao);
        }

        [Fact]
        public void ToViewModelList_DeveConverterListaDTOParaListaViewModel()
        {
            // Arrange
            var dtosLista = new List<ImovelDTO>
            {
                new ImovelDTO
                {
                    Id = 1, Cep = "12345678", Logradouro = "Rua A", Numero = "100", Bairro = "Bairro A",
                    Cidade = "São Paulo", Estado = "SP", Tipo = "A", Quartos = 2, Banheiros = 1,
                    Area = 65.00m, Valor = 1800.00m, IdLocador = 1
                },
                new ImovelDTO
                {
                    Id = 2, Cep = "87654321", Logradouro = "Av. B", Numero = "200", Bairro = "Bairro B",
                    Cidade = "Rio de Janeiro", Estado = "RJ", Tipo = "C", Quartos = 3, Banheiros = 2,
                    Area = 120.00m, Valor = 3200.00m, IdLocador = 2
                }
            };

            // Act
            var viewModelsLista = ImovelMapper.ToViewModelList(dtosLista);

            // Assert
            Assert.NotNull(viewModelsLista);
            Assert.Equal(2, viewModelsLista.Count());

            var lista = viewModelsLista.ToList();
            
            // Primeiro item
            Assert.Equal(1, lista[0].Id);
            Assert.Equal("São Paulo", lista[0].Cidade);
            Assert.Equal("Apartamento", lista[0].Tipo); // Convertido de "A"
            Assert.Equal(1800.00m, lista[0].Valor);
            Assert.Equal(1, lista[0].LocadorId);

            // Segundo item
            Assert.Equal(2, lista[1].Id);
            Assert.Equal("Rio de Janeiro", lista[1].Cidade);
            Assert.Equal("Casa", lista[1].Tipo); // Convertido de "C"
            Assert.Equal(3200.00m, lista[1].Valor);
            Assert.Equal(2, lista[1].LocadorId);
        }

        [Fact]
        public void ToViewModelList_ComListaVazia_DeveRetornarListaVazia()
        {
            // Arrange
            var dtosLista = new List<ImovelDTO>();

            // Act
            var viewModelsLista = ImovelMapper.ToViewModelList(dtosLista);

            // Assert
            Assert.NotNull(viewModelsLista);
            Assert.Empty(viewModelsLista);
        }

        [Fact]
        public void ToViewModelList_ComListaNula_DeveRetornarListaVazia()
        {
            // Arrange
            IEnumerable<ImovelDTO>? dtosLista = null;

            // Act & Assert - Deve lançar exceção pois não há proteção contra null
            Assert.Throws<ArgumentNullException>(() => ImovelMapper.ToViewModelList(dtosLista!));
        }

        [Theory]
        [InlineData("apartamento", "A")]
        [InlineData("casa", "C")]
        [InlineData("comercial", "PC")]
        [InlineData("APARTAMENTO", "A")] // Case insensitive
        [InlineData("Casa", "C")] // Case insensitive
        [InlineData("COMERCIAL", "PC")] // Case insensitive
        public void ToDTO_ComDiferentesTiposDeImovel_DeveConverterCorretamente(string tipoViewModel, string tipoEsperadoDto)
        {
            // Arrange
            var viewModel = new ImovelViewModel
            {
                Cep = "12345678", Logradouro = "Rua Teste", Numero = "123", Bairro = "Centro",
                Cidade = "Teste", Estado = "SP", Tipo = tipoViewModel, Quartos = 1, Banheiros = 1,
                Area = 50m, Valor = 1000m, LocadorId = 1
            };

            // Act
            var dto = ImovelMapper.ToDTO(viewModel);

            // Assert
            Assert.Equal(tipoEsperadoDto, dto.Tipo);
        }

        [Theory]
        [InlineData("A", "Apartamento")]
        [InlineData("C", "Casa")]
        [InlineData("PC", "Comercial")]
        [InlineData("INVALIDO", "INVALIDO")] // Tipo não mapeado deve retornar o mesmo valor
        public void ToViewModel_ComDiferentesTiposDeDTO_DeveConverterCorretamente(string tipoDtoDb, string tipoEsperadoViewModel)
        {
            // Arrange
            var dto = new ImovelDTO
            {
                Id = 1, Cep = "12345678", Logradouro = "Rua Teste", Numero = "123", Bairro = "Centro",
                Cidade = "Teste", Estado = "SP", Tipo = tipoDtoDb, Quartos = 1, Banheiros = 1,
                Area = 50m, Valor = 1000m, IdLocador = 1
            };

            // Act
            var viewModel = ImovelMapper.ToViewModel(dto);

            // Assert
            Assert.Equal(tipoEsperadoViewModel, viewModel.Tipo);
        }

        [Fact]
        public void Mapper_ComValoresDecimais_DevePreservarPrecisao()
        {
            // Arrange
            var viewModel = new ImovelViewModel
            {
                Cep = "12345678", Logradouro = "Rua Decimal", Numero = "123", Bairro = "Centro",
                Cidade = "São Paulo", Estado = "SP", Tipo = "apartamento", Quartos = 2,
                Banheiros = 1, Area = 87.65m, Valor = 1234.56m, LocadorId = 1
            };

            // Act
            var dto = ImovelMapper.ToDTO(viewModel);
            var viewModelConvertido = ImovelMapper.ToViewModel(dto);

            // Assert
            Assert.Equal(87.65m, dto.Area);
            Assert.Equal(1234.56m, dto.Valor);
            Assert.Equal(87.65m, viewModelConvertido.Area);
            Assert.Equal(1234.56m, viewModelConvertido.Valor);
        }

        [Fact]
        public void Mapper_ConversaoIdaEVolta_DevePreservarTodosDados()
        {
            // Arrange
            var viewModelOriginal = new ImovelViewModel
            {
                Id = 99,
                Cep = "01234567",
                Logradouro = "Rua Completa",
                Numero = "1001",
                Complemento = "Sala 45B",
                Bairro = "Vila Teste",
                Cidade = "São Paulo",
                Estado = "SP",
                Tipo = "comercial",
                Quartos = 0,
                Banheiros = 2,
                Area = 150.75m,
                VagasGaragem = 3,
                Valor = 5500.25m,
                Descricao = "Imóvel para teste de conversão",
                LocadorId = 10
            };

            // Act
            var dto = ImovelMapper.ToDTO(viewModelOriginal);
            var viewModelConvertido = ImovelMapper.ToViewModel(dto);

            // Assert - Verificar se todos os dados foram preservados (exceto conversão de tipo)
            Assert.Equal(viewModelOriginal.Id, viewModelConvertido.Id);
            Assert.Equal(viewModelOriginal.Cep, viewModelConvertido.Cep);
            Assert.Equal(viewModelOriginal.Logradouro, viewModelConvertido.Logradouro);
            Assert.Equal(viewModelOriginal.Numero, viewModelConvertido.Numero);
            Assert.Equal(viewModelOriginal.Complemento, viewModelConvertido.Complemento);
            Assert.Equal(viewModelOriginal.Bairro, viewModelConvertido.Bairro);
            Assert.Equal(viewModelOriginal.Cidade, viewModelConvertido.Cidade);
            Assert.Equal(viewModelOriginal.Estado, viewModelConvertido.Estado);
            Assert.Equal("Comercial", viewModelConvertido.Tipo); // Conversão esperada
            Assert.Equal(viewModelOriginal.Quartos, viewModelConvertido.Quartos);
            Assert.Equal(viewModelOriginal.Banheiros, viewModelConvertido.Banheiros);
            Assert.Equal(viewModelOriginal.Area, viewModelConvertido.Area);
            Assert.Equal(viewModelOriginal.VagasGaragem, viewModelConvertido.VagasGaragem);
            Assert.Equal(viewModelOriginal.Valor, viewModelConvertido.Valor);
            Assert.Equal(viewModelOriginal.Descricao, viewModelConvertido.Descricao);
            Assert.Equal(viewModelOriginal.LocadorId, viewModelConvertido.LocadorId);
        }
    }
}