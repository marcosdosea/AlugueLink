using AlugueLinkWEB.Controllers;
using AlugueLinkWEB.Models;
using Core.DTO;
using Core;
using Core.Service;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Moq;
using Xunit;

namespace AlugueLinkWebTests
{
    public class ImovelControllerTests : IDisposable
    {
        private readonly Mock<IImovelService> _mockImovelService;
        private readonly AluguelinkContext _context;
        private readonly ImovelController _controller;

        public ImovelControllerTests()
        {
            // Setup do mock do service
            _mockImovelService = new Mock<IImovelService>();

            // Setup do contexto in-memory
            var options = new DbContextOptionsBuilder<AluguelinkContext>()
                .UseInMemoryDatabase(databaseName: Guid.NewGuid().ToString())
                .Options;

            _context = new AluguelinkContext(options);
            SeedTestData();

            // Criar controller com dependências mockadas
            _controller = new ImovelController(_mockImovelService.Object, _context);
        }

        private void SeedTestData()
        {
            var locador = new Locador
            {
                Id = 1,
                Nome = "Locador Teste",
                Email = "locador@teste.com",
                Cpf = "12345678901",
                Telefone = "11999999999"
            };

            _context.Locadors.Add(locador);
            _context.SaveChanges();
        }

        #region Index Tests

        [Fact]
        public async Task Index_DeveRetornarViewComListaDeImoveis()
        {
            // Arrange
            var imoveisDto = new List<ImovelDTO>
            {
                new ImovelDTO 
                { 
                    Id = 1, Cidade = "São Paulo", Valor = 1500m, IdLocador = 1,
                    Cep = "01234567", Logradouro = "Rua A", Numero = "100", Bairro = "Centro",
                    Estado = "SP", Tipo = "A", Quartos = 2, Banheiros = 1, Area = 65m
                },
                new ImovelDTO 
                { 
                    Id = 2, Cidade = "Rio de Janeiro", Valor = 2000m, IdLocador = 1,
                    Cep = "21234567", Logradouro = "Av. B", Numero = "200", Bairro = "Copacabana",
                    Estado = "RJ", Tipo = "C", Quartos = 3, Banheiros = 2, Area = 120m
                }
            };

            _mockImovelService.Setup(s => s.GetAllAsync()).ReturnsAsync(imoveisDto);

            // Act
            var result = await _controller.Index();

            // Assert
            var viewResult = Assert.IsType<ViewResult>(result);
            var model = Assert.IsAssignableFrom<IEnumerable<ImovelViewModel>>(viewResult.Model);
            
            var lista = model.ToList();
            Assert.Equal(2, lista.Count);
            Assert.Contains(lista, i => i.Cidade == "São Paulo" && i.Valor == 1500m);
            Assert.Contains(lista, i => i.Cidade == "Rio de Janeiro" && i.Valor == 2000m);
            
            // Verificar se todos os imóveis têm LocadorId preenchido
            Assert.All(lista, i => Assert.True(i.LocadorId > 0, "Todos os imóveis devem ter LocadorId válido"));
        }

        [Fact]
        public async Task Index_ComListaVazia_DeveRetornarViewVazia()
        {
            // Arrange
            _mockImovelService.Setup(s => s.GetAllAsync()).ReturnsAsync(new List<ImovelDTO>());

            // Act
            var result = await _controller.Index();

            // Assert
            var viewResult = Assert.IsType<ViewResult>(result);
            var model = Assert.IsAssignableFrom<IEnumerable<ImovelViewModel>>(viewResult.Model);
            Assert.Empty(model);
        }

        #endregion

        #region Details Tests

        [Fact]
        public async Task Details_ComIdValido_DeveRetornarViewComImovel()
        {
            // Arrange
            var imovelDto = new ImovelDTO
            {
                Id = 1, Cidade = "São Paulo", Valor = 1500m, IdLocador = 1,
                Cep = "01234567", Logradouro = "Rua Teste", Numero = "123", Bairro = "Centro",
                Estado = "SP", Tipo = "A", Quartos = 2, Banheiros = 1, Area = 65m,
                Descricao = "Apartamento bem localizado"
            };

            _mockImovelService.Setup(s => s.GetByIdAsync(1)).ReturnsAsync(imovelDto);

            // Act
            var result = await _controller.Details(1);

            // Assert
            var viewResult = Assert.IsType<ViewResult>(result);
            var model = Assert.IsAssignableFrom<ImovelViewModel>(viewResult.Model);
            Assert.Equal(1, model.Id);
            Assert.Equal("São Paulo", model.Cidade);
            Assert.Equal(1500m, model.Valor);
            Assert.Equal("Locador Teste", model.LocadorNome);
        }

        [Fact]
        public async Task Details_ComIdNull_DeveRetornarNotFound()
        {
            // Act
            var result = await _controller.Details(null);

            // Assert
            Assert.IsType<NotFoundResult>(result);
        }

        [Fact]
        public async Task Details_ComIdInexistente_DeveRetornarNotFound()
        {
            // Arrange
            _mockImovelService.Setup(s => s.GetByIdAsync(999)).ReturnsAsync((ImovelDTO?)null);

            // Act
            var result = await _controller.Details(999);

            // Assert
            Assert.IsType<NotFoundResult>(result);
        }

        #endregion

        #region Create Tests

        [Fact]
        public void Create_GET_DeveRetornarView()
        {
            // Act
            var result = _controller.Create();

            // Assert
            Assert.IsType<ViewResult>(result);
        }

        [Fact]
        public async Task Create_POST_ComDadosValidos_DeveRedirecionarParaIndex()
        {
            // Arrange
            var viewModel = new ImovelViewModel
            {
                Cep = "12345678",
                Logradouro = "Rua Teste",
                Numero = "123",
                Bairro = "Centro",
                Cidade = "São Paulo",
                Estado = "SP",
                Tipo = "apartamento", // Será convertido para "A" pelo mapper
                Quartos = 2,
                Banheiros = 1,
                Area = 65.50m,
                VagasGaragem = 1,
                Valor = 1500.00m,
                Descricao = "Apartamento teste"
            };

            var dtoEsperado = new ImovelDTO
            {
                Id = 1,
                Cep = viewModel.Cep,
                Logradouro = viewModel.Logradouro,
                Numero = viewModel.Numero,
                Bairro = viewModel.Bairro,
                Cidade = viewModel.Cidade,
                Estado = viewModel.Estado,
                Tipo = "A", // Valor convertido pelo mapper
                Quartos = viewModel.Quartos,
                Banheiros = viewModel.Banheiros,
                Area = viewModel.Area,
                VagasGaragem = viewModel.VagasGaragem,
                Valor = viewModel.Valor,
                Descricao = viewModel.Descricao,
                IdLocador = 1
            };

            _mockImovelService
                .Setup(s => s.CreateAsync(It.IsAny<ImovelDTO>()))
                .ReturnsAsync(dtoEsperado);

            // Act
            var result = await _controller.Create(viewModel);

            // Assert
            var redirectResult = Assert.IsType<RedirectToActionResult>(result);
            Assert.Equal("Index", redirectResult.ActionName);

            // Verificar se o service foi chamado corretamente
            _mockImovelService.Verify(s => s.CreateAsync(It.Is<ImovelDTO>(dto => 
                dto.Cep == viewModel.Cep &&
                dto.Logradouro == viewModel.Logradouro &&
                dto.Numero == viewModel.Numero &&
                dto.Bairro == viewModel.Bairro &&
                dto.Cidade == viewModel.Cidade &&
                dto.Estado == viewModel.Estado &&
                dto.Tipo == "A" && // Valor correto após conversão
                dto.Quartos == viewModel.Quartos &&
                dto.Banheiros == viewModel.Banheiros &&
                dto.Area == viewModel.Area &&
                dto.VagasGaragem == viewModel.VagasGaragem &&
                dto.Valor == viewModel.Valor &&
                dto.Descricao == viewModel.Descricao &&
                dto.IdLocador == 1
            )), Times.Once);
        }

        [Fact]
        public async Task Create_POST_ComCamposObrigatoriosPreenchidos_DeveFuncionar()
        {
            // Arrange - Apenas campos obrigatórios segundo a validação atual
            var viewModel = new ImovelViewModel
            {
                Cep = "01234567",
                Logradouro = "Av. Paulista",
                Numero = "1000",
                Bairro = "Bela Vista",
                Cidade = "São Paulo",
                Estado = "SP",
                Tipo = "comercial", // Será convertido para "PC"
                Quartos = 0, // Para comercial
                Banheiros = 2,
                Area = 120.00m,
                Valor = 5000.00m
            };

            _mockImovelService
                .Setup(s => s.CreateAsync(It.IsAny<ImovelDTO>()))
                .ReturnsAsync(new ImovelDTO { Id = 1, IdLocador = 1 });

            // Act
            var result = await _controller.Create(viewModel);

            // Assert
            var redirectResult = Assert.IsType<RedirectToActionResult>(result);
            Assert.Equal("Index", redirectResult.ActionName);
            Assert.Equal(1, viewModel.LocadorId); // Deve ter sido definido
        }

        [Fact]
        public async Task Create_POST_ComModelStateInvalido_DeveRetornarView()
        {
            // Arrange
            var viewModel = new ImovelViewModel();
            _controller.ModelState.AddModelError("Cidade", "Cidade é obrigatória");

            // Act
            var result = await _controller.Create(viewModel);

            // Assert
            var viewResult = Assert.IsType<ViewResult>(result);
            Assert.Equal(viewModel, viewResult.Model);

            // Verificar que o service não foi chamado
            _mockImovelService.Verify(s => s.CreateAsync(It.IsAny<ImovelDTO>()), Times.Never);
        }

        [Fact]
        public async Task Create_POST_QuandoServiceLancaException_DeveAdicionarErroERetornarView()
        {
            // Arrange
            var viewModel = new ImovelViewModel
            {
                Cep = "12345678", Logradouro = "Rua Teste", Numero = "123", Bairro = "Centro",
                Cidade = "São Paulo", Estado = "SP", Tipo = "casa", Quartos = 2, 
                Banheiros = 1, Area = 80m, Valor = 1500.00m
            };

            _mockImovelService
                .Setup(s => s.CreateAsync(It.IsAny<ImovelDTO>()))
                .ThrowsAsync(new Exception("Erro de teste"));

            // Act
            var result = await _controller.Create(viewModel);

            // Assert
            var viewResult = Assert.IsType<ViewResult>(result);
            Assert.Equal(viewModel, viewResult.Model);
            Assert.True(_controller.ModelState.ContainsKey(""));
            Assert.Contains("Erro ao salvar o imóvel", _controller.ModelState[""].Errors[0].ErrorMessage);
        }

        [Fact]
        public async Task Create_POST_SemLocadorNoBanco_DeveCriarLocadorPadraoESalvarImovel()
        {
            // Arrange
            // Limpar locadores do contexto
            _context.Locadors.RemoveRange(_context.Locadors);
            await _context.SaveChangesAsync();

            var viewModel = new ImovelViewModel
            {
                Cep = "12345678", Logradouro = "Rua Teste", Numero = "123", Bairro = "Centro",
                Cidade = "São Paulo", Estado = "SP", Tipo = "casa", Quartos = 2,
                Banheiros = 1, Area = 80m, Valor = 1500.00m
            };

            _mockImovelService
                .Setup(s => s.CreateAsync(It.IsAny<ImovelDTO>()))
                .ReturnsAsync(new ImovelDTO { Id = 1, IdLocador = 2 }); // Novo locador terá ID = 2

            // Act
            var result = await _controller.Create(viewModel);

            // Assert
            var redirectResult = Assert.IsType<RedirectToActionResult>(result);
            Assert.Equal("Index", redirectResult.ActionName);

            // Verificar se o locador padrão foi criado
            var locadorCriado = await _context.Locadors.FirstOrDefaultAsync();
            Assert.NotNull(locadorCriado);
            Assert.Equal("Locador Padrão", locadorCriado.Nome);
            Assert.Equal("padrao@aluguelink.com", locadorCriado.Email);

            // Verificar se o service foi chamado com o ID do novo locador
            _mockImovelService.Verify(s => s.CreateAsync(It.Is<ImovelDTO>(dto => 
                dto.IdLocador == locadorCriado.Id
            )), Times.Once);
        }

        [Theory]
        [InlineData("casa", "C")]
        [InlineData("apartamento", "A")]
        [InlineData("comercial", "PC")]
        public async Task Create_POST_ComDiferentesTiposDeImovel_DeveFuncionar(string tipoViewModel, string tipoDto)
        {
            // Arrange
            var viewModel = new ImovelViewModel
            {
                Cep = "12345678", Logradouro = "Rua Teste", Numero = "123", Bairro = "Centro",
                Cidade = "Teste", Estado = "SP", Tipo = tipoViewModel, Quartos = 1,
                Banheiros = 1, Area = 50m, Valor = 1000.00m
            };

            _mockImovelService
                .Setup(s => s.CreateAsync(It.IsAny<ImovelDTO>()))
                .ReturnsAsync(new ImovelDTO { Id = 1, Tipo = tipoDto });

            // Act
            var result = await _controller.Create(viewModel);

            // Assert
            var redirectResult = Assert.IsType<RedirectToActionResult>(result);
            Assert.Equal("Index", redirectResult.ActionName);

            _mockImovelService.Verify(s => s.CreateAsync(It.Is<ImovelDTO>(dto => 
                dto.Tipo == tipoDto
            )), Times.Once);
        }

        [Fact]
        public async Task Create_POST_ComValoresDecimais_DevePreservarPrecisao()
        {
            // Arrange
            var viewModel = new ImovelViewModel
            {
                Cep = "12345678", Logradouro = "Rua Decimal", Numero = "456", Bairro = "Centro",
                Cidade = "São Paulo", Estado = "SP", Tipo = "apartamento", Quartos = 2,
                Banheiros = 1, Area = 87.65m, Valor = 1234.56m
            };

            _mockImovelService
                .Setup(s => s.CreateAsync(It.IsAny<ImovelDTO>()))
                .ReturnsAsync(new ImovelDTO { Id = 1, Area = 87.65m, Valor = 1234.56m });

            // Act
            var result = await _controller.Create(viewModel);

            // Assert
            var redirectResult = Assert.IsType<RedirectToActionResult>(result);
            Assert.Equal("Index", redirectResult.ActionName);

            _mockImovelService.Verify(s => s.CreateAsync(It.Is<ImovelDTO>(dto => 
                dto.Area == 87.65m && dto.Valor == 1234.56m
            )), Times.Once);
        }

        #endregion

        #region Edit Tests

        [Fact]
        public async Task Edit_GET_ComIdValido_DeveRetornarViewComImovel()
        {
            // Arrange
            var imovelDto = new ImovelDTO
            {
                Id = 1, Cidade = "São Paulo", Valor = 1500m, IdLocador = 1,
                Cep = "01234567", Logradouro = "Rua Edit", Numero = "100", Bairro = "Centro",
                Estado = "SP", Tipo = "C", Quartos = 3, Banheiros = 2, Area = 120m
            };

            _mockImovelService.Setup(s => s.GetByIdAsync(1)).ReturnsAsync(imovelDto);

            // Act
            var result = await _controller.Edit(1);

            // Assert
            var viewResult = Assert.IsType<ViewResult>(result);
            var model = Assert.IsAssignableFrom<ImovelViewModel>(viewResult.Model);
            Assert.Equal(1, model.Id);
            Assert.Equal("São Paulo", model.Cidade);
            Assert.NotNull(_controller.ViewBag.LocadorId);
        }

        [Fact]
        public async Task Edit_GET_ComIdNull_DeveRetornarNotFound()
        {
            // Act
            var result = await _controller.Edit(null);

            // Assert
            Assert.IsType<NotFoundResult>(result);
        }

        [Fact]
        public async Task Edit_POST_ComDadosValidos_DeveAtualizarERedireccionar()
        {
            // Arrange
            var viewModel = new ImovelViewModel
            {
                Id = 1, Cep = "87654321", Logradouro = "Rua Editada", Numero = "999", Bairro = "Novo",
                Cidade = "Rio de Janeiro", Estado = "RJ", Tipo = "apartamento", Quartos = 4,
                Banheiros = 3, Area = 150m, VagasGaragem = 2, Valor = 3000m, LocadorId = 1
            };

            _mockImovelService
                .Setup(s => s.UpdateAsync(1, It.IsAny<ImovelDTO>()))
                .ReturnsAsync(new ImovelDTO { Id = 1 });

            // Act
            var result = await _controller.Edit(1, viewModel);

            // Assert
            var redirectResult = Assert.IsType<RedirectToActionResult>(result);
            Assert.Equal("Index", redirectResult.ActionName);

            _mockImovelService.Verify(s => s.UpdateAsync(1, It.Is<ImovelDTO>(dto =>
                dto.Id == 1 &&
                dto.Cidade == "Rio de Janeiro" &&
                dto.Valor == 3000m &&
                dto.Tipo == "A" // Convertido pelo mapper
            )), Times.Once);
        }

        [Fact]
        public async Task Edit_POST_ComIdDiferente_DeveRetornarNotFound()
        {
            // Arrange
            var viewModel = new ImovelViewModel { Id = 2 };

            // Act
            var result = await _controller.Edit(1, viewModel);

            // Assert
            Assert.IsType<NotFoundResult>(result);
        }

        #endregion

        #region Delete Tests

        [Fact]
        public async Task Delete_GET_ComIdValido_DeveRetornarViewComImovel()
        {
            // Arrange
            var imovelDto = new ImovelDTO
            {
                Id = 1, Cidade = "São Paulo", Valor = 1500m, IdLocador = 1,
                Cep = "01234567", Logradouro = "Rua Delete", Numero = "123", Bairro = "Centro",
                Estado = "SP", Tipo = "C", Quartos = 2, Banheiros = 1, Area = 80m
            };

            _mockImovelService.Setup(s => s.GetByIdAsync(1)).ReturnsAsync(imovelDto);

            // Act
            var result = await _controller.Delete(1);

            // Assert
            var viewResult = Assert.IsType<ViewResult>(result);
            var model = Assert.IsAssignableFrom<ImovelViewModel>(viewResult.Model);
            Assert.Equal(1, model.Id);
            Assert.Equal("Locador Teste", model.LocadorNome);
        }

        [Fact]
        public async Task DeleteConfirmed_ComIdValido_DeveExcluirERedireccionar()
        {
            // Arrange
            _mockImovelService.Setup(s => s.DeleteAsync(1)).ReturnsAsync(true);

            // Act
            var result = await _controller.DeleteConfirmed(1);

            // Assert
            var redirectResult = Assert.IsType<RedirectToActionResult>(result);
            Assert.Equal("Index", redirectResult.ActionName);

            _mockImovelService.Verify(s => s.DeleteAsync(1), Times.Once);
        }

        [Fact]
        public async Task DeleteConfirmed_ComIdInexistente_DeveRetornarNotFound()
        {
            // Arrange
            _mockImovelService.Setup(s => s.DeleteAsync(999)).ReturnsAsync(false);

            // Act
            var result = await _controller.DeleteConfirmed(999);

            // Assert
            Assert.IsType<NotFoundResult>(result);
        }

        #endregion

        #region Validation Tests

        [Fact]
        public async Task Create_POST_ComCamposObrigatoriosVazios_DeveValidarCorretamente()
        {
            // Arrange
            var viewModel = new ImovelViewModel
            {
                // Deixar campos obrigatórios vazios para testar validação
                Cep = "", // Obrigatório
                Logradouro = "", // Obrigatório
                Numero = "", // Obrigatório
                Bairro = "", // Obrigatório
                Cidade = "", // Obrigatório
                Estado = "", // Obrigatório
                Tipo = "", // Obrigatório
                // Quartos, Banheiros, Area, Valor são obrigatórios também
            };

            // Simular validação do ModelState
            _controller.ModelState.AddModelError("Cep", "CEP é obrigatório");
            _controller.ModelState.AddModelError("Cidade", "Cidade é obrigatória");

            // Act
            var result = await _controller.Create(viewModel);

            // Assert
            var viewResult = Assert.IsType<ViewResult>(result);
            Assert.False(_controller.ModelState.IsValid);
            _mockImovelService.Verify(s => s.CreateAsync(It.IsAny<ImovelDTO>()), Times.Never);
        }

        [Fact]
        public async Task Create_POST_ComValoresForaDoRange_DeveValidarCorretamente()
        {
            // Arrange
            var viewModel = new ImovelViewModel
            {
                Cep = "12345678", Logradouro = "Rua Teste", Numero = "123", Bairro = "Centro",
                Cidade = "São Paulo", Estado = "SP", Tipo = "casa",
                Quartos = 51, // Acima do máximo (50)
                Banheiros = -1, // Abaixo do mínimo (0)
                Area = 0, // Abaixo do mínimo (0.01)
                VagasGaragem = 51, // Acima do máximo (50)
                Valor = 0 // Abaixo do mínimo (0.01)
            };

            // Simular validação do ModelState
            _controller.ModelState.AddModelError("Quartos", "Número de quartos deve estar entre 0 e 50");
            _controller.ModelState.AddModelError("Area", "Área deve ser um valor entre 0,01 e 99.999,99 m²");

            // Act
            var result = await _controller.Create(viewModel);

            // Assert
            var viewResult = Assert.IsType<ViewResult>(result);
            Assert.False(_controller.ModelState.IsValid);
            _mockImovelService.Verify(s => s.CreateAsync(It.IsAny<ImovelDTO>()), Times.Never);
        }

        #endregion

        public void Dispose()
        {
            _context.Dispose();
        }
    }}}